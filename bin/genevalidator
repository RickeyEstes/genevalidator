#!/usr/bin/env ruby
require 'optparse'
require 'English'

opt = {}

global = OptionParser.new do |opts|
  opts.banner = <<BANNER
SUMMARY:
  GeneValidator - Identify problems with predicted genes

USAGE:
  genevalidator [OPTIONAL ARGUMENTS] INPUT_FILE

  To run as a web application:

    genevalidator app [OPTIONAL ARGUMENTS]

    See 'genevalidator app --help' for more information

BANNER

  opts.separator 'OPTIONAL ARGUMENTS'
  opts.separator ' '

  opt[:validations] = ['all']
  opts.on('-v', '--validations [VALIDATIONS]', Array,
          'The Validations to be applied.',
          'Validation Options Available (separated by comma):',
          '  all   = All validations (default),',
          '  lenc  = Length validation by clusterization,',
          '  lenr  = Length validation by ranking,',
          '  merge = Analyse gene merge,',
          '  dup   = Check for duplications,',
          '  frame = Open reading frame (ORF) validation,',
          '  orf   = Main ORF validation,',
          '  align = Validating based on multiple alignment') do |val|
    opt[:validations] = val
  end

  opt[:db] = 'swissprot -remote'
  opts.on('-d', '--db [BLAST_DATABASE]',
          'Path to the BLAST database',
          'GeneValidator also supports remote databases:',
          'e.g.   genevalidator -d "swissprot -remote" Input_File') do |db|
    opt[:db] = db
  end

  opts.on('-s', '--select_single_best',
          'Writes the fasta sequence of the best scoring gene to STDOUT.') do
    opt[:select_single_best] = true
  end

  opts.separator ' '
  opts.separator '# OUTPUT ARGUMENTS'
  opts.separator ' '

  opts.on('-o', '--output_dir [PATH]',
          'Path to the output folder.',
          'By default the output folder is in the same directory as the input',
          'file and is named as "GV_" followed by the time of analysis') do |d|
    opt[:output_dir] = d
  end

  opts.on('-f', '--force_rewrite', 'Rewrites over existing output.') do
    opt[:force_rewrite] = true
  end

  opt[:output_formats] = %w[html csv json stdout summary]
  opts.on('--output_formats [FORMATS]',
          'Output Formats to generate. This can be either: "all", "html",',
          '"csv", "json", "summary" or "stdout". Multiple formats can be',
          'separated by a semi-colon e.g. "csv:json".',
          'By default, all output formats are generated.') do |f|
    opt[:output_formats] = f.split(':') unless f == 'all'
  end

  opts.separator ' '
  opts.separator '# BLAST ARGUMENTS'
  opts.separator ' '

  opts.on('-b', '--blast_options [STRING]',
          'A string that is to passed to BLAST') do |blast_options|
    opt[:blast_options] = blast_options
  end

  opts.on('-x', '--blast_xml_file [PATH]',
          'Provide GeneValidator with a pre-computed BLAST XML output',
          'file (BLAST -outfmt option 5).') do |blast_xml_file|
    opt[:blast_xml_file] = blast_xml_file
  end

  opts.on('-t', '--blast_tabular_file [PATH]',
          'Provide GeneValidator with a pre-computed BLAST tabular output',
          'file. (BLAST -outfmt option 6).') do |blast_tabular_file|
    opt[:blast_tabular_file] = blast_tabular_file
  end

  # default blast tabular columns
  opts.on('--blast_tabular_options [BLAST_TABULAR_OPTIONS]',
          'Custom format used in BLAST -outfmt argument',
          'See BLAST+ manual pages for more details') do |blast_table_options|
    opt[:blast_tabular_options] = blast_table_options
  end

  opts.on('-r', '--raw_sequences [PATH]',
          'Supply a fasta file of the raw sequences of all BLAST hits present',
          'in the supplied BLAST XML or BLAST tabular file.') do |raw_seq|
    opt[:raw_sequences] = raw_seq
  end

  opts.separator ' '
  opts.separator '# EXTRACT RAW SEQUENCES ARGUMENTS'
  opts.separator ' '

  opts.on('-e', '--extract_raw_seqs',
          'Extract a fasta file of the raw sequences of BLAST hits in the',
          'supplied BLAST output file. This fasta file can then be provided to',
          'GeneValidator with the "-r", "--raw_sequences" argument') do
    opt[:extract_raw_seqs] = true
  end

  opts.separator ' '
  opts.separator '# REPROCESS JSON ARGUMENTS'
  opts.separator ' '

  opts.on('-j', '--json_file [JSON_FILE]',
          'Path to json file. Re-generate the HTML report from a (filtered)',
          'JSON file that was previously produced by GeneValidator') do |json|
    opt[:json_file] = json
  end

  opts.separator ' '
  opts.separator '# GENERAL ARGUMENTS'
  opts.separator ' '

  opt[:num_threads] = 1
  opts.on('-n', '--num_threads [THREADS]',
          'Specify the number of processor threads to use when running',
          'BLAST and Mafft within GeneValidator.') do |num_threads|
    opt[:num_threads] = num_threads
  end

  opts.on('--bin [dir]', Array,
          'Path to BLAST and MAFFT bin folders (is added to $PATH variable)',
          'To be provided as follows:',
          'e.g.   genevalidator --bin /blast/bin/ --bin /mafft/bin/') do |bin|
    (opt[:bin] ||= []).concat(bin)
  end

  opts.on('-h', '--help', 'Show this screen.') do
    puts global
    exit
  end

  opts.on('-v', '--version',
          'The version of GeneValidator that you are running.') do
    require 'genevalidator/version'
    puts GeneValidator::VERSION
    exit
  end
end

subcommands = {
  'app' => OptionParser.new do |opts|
    opts.banner = <<BANNER
SUMMARY:
  Launch GeneValidator as a web application

USAGE:
  $ genevalidator app [options]

Examples:
  # Launch GeneValidatorApp with the given config file
  $ genevalidator app --config ~/.genevalidatorapp.conf

  # Launch GeneValidatorApp with 8 threads at port 8888
  $ genevalidator app --num_threads 8 --port 8888

  # Create a config file with the other arguments
  $ genevalidator app -s -d ~/database_dir

BANNER

    opts.separator 'MANDATORY ARGUMENTS'
    opts.separator ' '

    # attempt to set the database dir to GV_BLAST_DB_DIR if it exists
    opt[:database_dir] = ENV.fetch('GV_BLAST_DB_DIR') { nil }
    opts.on('-d', '--database_dir [PATH]',
            'Path to the directory containing BLAST database') do |path|
      opt[:database_dir] = path
    end

    opts.separator ' '
    opts.separator 'OPTIONAL ARGUMENTS'
    opts.separator ' '

    opts.on('-c', '--config_file [PATH]',
            'Path to the directory containing BLAST database') do |path|
      opt[:config_file] = path
    end

    opts.on('-g', '--gv_public_dir [PATH]',
            'The public directory that is served to the web application') do |path|
      opt[:gv_public_dir] = path
    end

    opts.on('-b', '--bin [PATH]', Array,
            'Path to BLAST and MAFFT bin folders (is added to $PATH variable)',
            'To be provided as follows:',
            'e.g.   genevalidator -b /blast/bin/path/ -b /mafft/bin/path/') do |bin|
      (opt[:bin] ||= []).concat(bin)
    end

    opts.on('-f', '--default_database_path  [PATH]',
            'Path to the default BLAST database') do |path|
      opt[:default_database_path] = path
    end

    opts.on('-H', '--host [HOST]',
            'Host to run GeneValidatorApp on') do |host|
      opt[:host] = host
    end

    opts.on('-p', '--port [PORT]',
            'Port to run GeneValidatorApp on') do |port|
      opt[:port] = port
    end

    opts.on('-s', '--set',
            'Set configuration value in default or given config file') do
      opt[:set] = true
    end

    opts.on('-l', '--list_databases',
            'List found BLAST databases') do
      opt[:list_databases] = true
    end

    opt[:num_threads] = 1
    opts.on('-n', '--num_threads [THREADS]',
            'Number of threads to use to running the app') do |num_threads|
      opt[:num_threads] = num_threads
    end

    opts.on('-D', '--devel',
            'Start GeneValidatorApp in development mode') do
      opt[:devel] = true
    end

    opts.on('-h', '--help', 'Show this screen.') do
      puts subcommands['app']
      exit
    end
  end,
  'serve' => OptionParser.new do |opts|
    opts.banner = <<BANNER
SUMMARY:
  Create a web server for viewing results

USAGE:
  $ genevalidator serve [options] OUTPUT_DIR

ARGUMENTS:
BANNER
    opt[:port] = 8080
    opts.on('-p', '--port [PORT]',
            'Port to run the server on') do |port|
      opt[:port] = port
    end

    opts.on('-h', '--help', 'Show this screen.') do
      puts subcommands['serve']
      exit
    end
  end
}

begin
  global.order!
  first_arg = ARGV.shift
  if subcommands.keys.include?(first_arg)
    command = first_arg
    subcommands[command].order! unless subcommands[command].nil?
  else
    opt[:input_fasta_file] = first_arg
  end
  if opt[:input_fasta_file].nil? && command.nil?
    warn # a blank line
    warn "==> Error: Input Fasta file required."
    warn # a blank line
    warn # a blank line
    puts global
    exit 1
  end
  if opt[:database_dir].nil? && command == 'app'
    warn # a blank line
    warn "==> Error: Database directory containing BLAST databases required."
    warn # a blank line
    warn # a blank line
    puts subcommands['app']
    exit 1
  end
rescue OptionParser::ParseError
  $stderr.print 'Error: ' + $ERROR_INFO.to_s + "\n"
  exit 1
end

if command.nil? && opt[:extract_raw_seqs] && opt[:raw_sequences].nil?
  require 'genevalidator/get_raw_sequences'
  GeneValidator.opt    = opt
  GeneValidator.config = {}
  # GVArgValidation.run_raw_seqs
  GeneValidator::RawSequences.run
elsif command.nil? && opt[:json_file]
  require 'genevalidator/json_to_gv_results'
  GeneValidator.opt = opt
  # GVArgValidation.run_json_to_gv_results
  GeneValidator::JsonToGVResults.run
elsif command.nil?
  start = Time.now
  require 'genevalidator'
  opt[:output_formats] = 'fasta' if opt[:select_single_best]
  GeneValidator.init(opt)
  GeneValidator.run
  warn "Total running time: #{(Time.now - start).round(3)}s"
  warn # a blank line
elsif command == 'serve'
  require 'rack'

  # Uses `open` on Mac or `xdg-open` on Linux to opens the search form in
  # user's default browser. Errors, if any, are silenced.
  def open_in_browser(server_url)
    return if using_ssh?
    if RUBY_PLATFORM =~ /linux/ && xdg?
      system "xdg-open #{server_url}"
    elsif RUBY_PLATFORM =~ /darwin/
      system "open #{server_url}"
    end
  rescue
    # fail silently
  end

  def using_ssh?
    true if ENV['SSH_CLIENT'] || ENV['SSH_TTY'] || ENV['SSH_CONNECTION']
  end

  def xdg?
    true if ENV['DISPLAY'] && command?('xdg-open')
  end

  dir = ARGV[0]
  index_file = File.basename( Dir[ File.join(dir, '*.html') ].sort.first )
  app = Rack::Static.new nil, urls: [""], root: dir, index: index_file
  Rack::Server.start app: app, port: opt[:port], StartCallback: proc {
    open_in_browser("http://localhost:#{opt[:port]}")
  }
elsif command == 'app'
  ENV['RACK_ENV'] = 'development' if opt[:devel]

  # Exit gracefully on SIGINT.
  stty = `stty -g`.chomp
  trap('INT') do
    warn ''
    warn 'Aborted.'
    system('stty', stty)
    exit
  end

  require 'genevalidatorapp'

  begin
    GeneValidatorApp.init opt

    # The aim of following error recovery scenarios is to guide user to a
    # working GeneValidatorApp installation. We expect to land following
    # error scenarios either when creating a new GeneValidatorApp (first
    # time or later), or updating config values using -s CLI option.
  rescue GeneValidatorApp::CONFIG_FILE_ERROR => e
    warn e
    exit!
  rescue GeneValidatorApp::NUM_THREADS_INCORRECT => e
    warn e

    if opt[:num_threads].nil?
      warn 'You can set the correct value by running:'
      warn
      warn '  genevalidatorapp -s -n <value>'
      warn
    end

    exit!
  rescue GeneValidatorApp::BIN_DIR_NOT_FOUND => e
    warn e

    if opt[:bin].nil?
      warn 'You can set the correct value by running:'
      warn
      warn '  genevalidatorapp -s -b <value>'
      warn
    end

    exit!
  rescue GeneValidatorApp::DATABASE_DIR_NOT_FOUND => e
    warn e

    if opt[:database_dir].nil?
      warn 'You can set the correct value by running:'
      warn
      warn '  genevalidatorapp -s -d <value>'
      warn
    end

    exit!
  rescue GeneValidatorApp::BLAST_DATABASE_ERROR => e
    warn e
    exit!
  rescue => e
    # This will catch any unhandled error and some very special errors.
    # Ideally we will never hit this block. If we do, there's a bug in
    # GeneValidatorApp or something really weird going on. If we hit this
    # error block we show the stacktrace to the user requesting them to
    # post the same to our Google Group.
    warn <<MSG
Something went wonky

Looks like you have encountered a bug in GeneValidatorApp. Please could you
report this incident here -
https://github.com/wurmlab/genevalidator/issues

Error:
#{e.backtrace.unshift(e.message).join("\n")}
MSG
    exit!
  end

  if opt[:list_databases]
    puts GeneValidatorApp::Database.all
    exit
  end

  if opt[:set]
    GeneValidatorApp.config.write_config_file
    exit
  end

  GeneValidatorApp.run
end
